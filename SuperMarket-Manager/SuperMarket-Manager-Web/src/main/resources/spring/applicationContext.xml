<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-4.1.xsd">
    
    <!--加载配置文件  -->
    <context:property-placeholder location="classpath:properties/*.properties"/>

	<!--开启注解bean扫描 -->
	<!-- 是用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解 -->
	<context:annotation-config />
	<context:component-scan base-package="com.*"></context:component-scan>

	<!--加载数据源 -->
	<!-- 加载数据源之前先加载数据源properties配置文件,jdbc.properties被放在了properties目录下被统一加载 -->
	<!-- <context:property-placeholder location="classpath:properties/*.properties"/> -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}">
		</property>
		<property name="url" value="${jdbc.jdbcUrl}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!--最大连接数 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!--最小连接数 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
	</bean>

		
	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ncs.mapper" />
	</bean>
	

	<!--事务配置 -->
	<!-- 配置事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 配置事务增强（对哪些方法使用事务？使用事务的策略） -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS"
				read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 开启AOP注解使用，声明为IOC容器中目标bean设置代理，织入切面 <aop:aspectj-autoproxy poxy-target-class="true"/>时， 
		表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false， -->
	<!-- 如果目标类没有声明接口，则spring将自动使用CGLib动态代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!-- AOP指定事务的切入点 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* com.ncs.service.*.*(..))" id="pt" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pt" />
	</aop:config>


	<!--缓存配置，这里使用redis -->

</beans>