<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.ncs</groupId>
		<artifactId>SuperMarket</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>SuperMarket-Search</artifactId>
	<packaging>war</packaging>
	<description>SuperMarket-Search</description>

	<dependencies>
		<!--添加对于SuperMarket Mapper层的依赖，mapper层里面就已经添加了持久层框架的依赖MYbatis，所以后边不在需要添加 -->
		<dependency>
			<groupId>com.ncs</groupId>
			<artifactId>SuperMarket-Manager-Mapper</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.ncs</groupId>
			<artifactId>SuperMarket-Common</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<!--添加Spring的依赖 -->
		<!-- Spring IOC容器相关 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<!-- spring 依赖注入 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<!-- spring web相关依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>
		<!-- spring整合jdbc的依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
		</dependency>
		<!-- spring 切面依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>
		<!--spring 上下文支持 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>

		<!-- 单元测试 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- 日志处理 slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>

		<!-- Jackson Json处理工具包 -->
		<!--例如从数据库返回的date类型数据在转换为json时会变成long类型，此依赖可以解决此问题 -->
		<!-- json转换器 我们使用它还需要在SpringMVC全局配置中加上 json转换器 -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!-- Apache工具组件 -->
		<!-- 提供更多的工具类 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<!-- IO相关 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-io</artifactId>
		</dependency>
		<!-- 网络通信相关 例子： FTP -->
		<dependency>
			<groupId>commons-net</groupId>
			<artifactId>commons-net</artifactId>
		</dependency>

		<!-- solr客户端 -->
		<!-- solrJ是访问Solr服务的JAVA客户端，提供索引和搜索的请求方法 -->
		<dependency>
			<groupId>org.apache.solr</groupId>
			<artifactId>solr-solrj</artifactId>
		</dependency>
	</dependencies>

	<!--添加Tomcat插件 -->
	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- 资源文件拷贝插件 -->
			<!-- 插件的作用 主要是处理将 主程序与 测试程序所需的资源文件复制到输出编译文件夹中 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- java编译插件 -->
			<!-- 配置编译时JDK的版本，编码方式 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!-- 配置Tomcat插件 -->
				<!-- 将tomcat 内嵌到 web项目中，这样可以直接运行 webapp项目 -->
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.2</version>
					<configuration>
						<!--端口号 -->
						<port>8084</port>
						<!-- 根目录 -->
						<path>/</path>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<!--解决配置文件无法被编译进入target目录文件中 -->
		<resources>
			<resource>
				<directory>src/main/java</directory>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/*.xml</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
	</build>
</project>